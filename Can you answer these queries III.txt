#include <iostream>
#include<bits/stdc++.h>
using namespace std;
struct nod{
int psum,ssum,sum,msum;
};
nod tree[8*60000];int ar[60000];
void build(int index,int start,int end)
{
    if(start==end)
    {
        tree[index].psum=ar[start];
        tree[index].ssum=ar[start];
        tree[index].sum=ar[start];
        tree[index].msum=ar[start];
    }
    else
    {
        int mid=(start+end)/2;
        build(2*index+1,start,mid);
        build(2*index+2,mid+1,end);
        tree[index].sum=tree[2*index+1].sum+tree[2*index+2].sum;
        tree[index].psum=max(tree[2*index+1].psum,tree[2*index+1].sum+tree[2*index+2].psum);
        tree[index].ssum=max(tree[2*index+2].ssum,tree[2*index+2].sum+tree[2*index+1].ssum);
        tree[index].msum=max(tree[2*index+1].msum,max(tree[2*index+2].msum,max(tree[index].ssum,max(tree[index].psum,tree[2*index+1].ssum+tree[2*index+2].psum))));
    }
}
nod query(int index,int start,int end,int l,int r)
{
    nod result;
    result.ssum=result.psum=result.sum=result.msum=INT_MIN;
    if(r<start||l>end)
    {
        return result;
    }
    if(l<=start&&end<=r)
    {
        return tree[index];
    }
    int mid=(start+end)/2;
    if(l>mid)
    {
        return query(2*index+2,mid+1,end,l,r);
    }
    if(r<=mid)
    {
        return query(2*index+1,start,mid,l,r);
    }
    nod left=query(2*index+1,start,mid,l,r);
    nod right=query(2*index+2,mid+1,end,l,r);
    result.sum=left.sum+right.sum;
    result.psum=max(left.psum,left.sum+right.psum);
    result.ssum=max(right.ssum,right.sum+left.ssum);
    result.msum =
      max(result.psum,
         max(result.ssum,
            max(left.msum,
               max(right.msum,
                  left.ssum + right.psum))));
    return result;
}
void update(int index,int start,int end,int idx,int value)
{
    if(start==end)
    {
        tree[index].psum=value;
        tree[index].ssum=value;
        tree[index].sum=value;
        tree[index].msum=value;
    }
    else
    {
        int mid=(start+end)/2;
        if(idx<=mid)
        {
            update(2*index+1,start,mid,idx,value);
        }
        else
        {
            update(2*index+2,mid+1,end,idx,value);
        }
        tree[index].sum=tree[2*index+1].sum+tree[2*index+2].sum;
        tree[index].psum=max(tree[2*index+1].psum,tree[2*index+1].sum+tree[2*index+2].psum);
        tree[index].ssum=max(tree[2*index+2].ssum,tree[2*index+2].sum+tree[2*index+1].ssum);
        tree[index].msum=max(tree[2*index+1].msum,max(tree[2*index+2].msum,max(tree[index].ssum,max(tree[index].psum,tree[2*index+1].ssum+tree[2*index+2].psum))));
    }
}
int main()
{
    //cout << "Hello world!" << endl;
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t,i,j,k,m,n;
    cin>>n;
    for(i=0;i<n;i++)
    {
        cin>>ar[i];
    }
    build(0,0,n-1);
cin>>m;
while(m--)
{
    cin>>k>>i>>j;
    if(k)
    {
    cout<<query(0,0,n-1,i-1,j-1).msum<<"\n";
    }
    else
        update(0,0,n-1,i-1,j);
}
    return 0;
}
